// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Service
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProvisioningServiceClient.
    /// </summary>
    public static partial class ProvisioningServiceClientExtensions
    {
            /// <summary>
            /// Get a device enrollment record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Registration ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndividualEnrollment> GetIndividualEnrollmentAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndividualEnrollmentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a device enrollment record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Registration ID.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the enrollment record.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIndividualEnrollmentAsync(this IProvisioningServiceClient operations, string id, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteIndividualEnrollmentWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a device enrollment group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Enrollment group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroup> GetEnrollmentGroupAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnrollmentGroupWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a device enrollment group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Enrollment group ID.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the enrollment group record.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEnrollmentGroupAsync(this IProvisioningServiceClient operations, string id, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEnrollmentGroupWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the device registration state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Registration ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRegistrationState> GetDeviceRegistrationStateAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceRegistrationStateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the device registration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Registration ID.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the registration status record.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeviceRegistrationStateAsync(this IProvisioningServiceClient operations, string id, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeviceRegistrationStateWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Individual device enrollment operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='individualEnrollmentOperation'>
            /// Indovidual enrollment operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentOperationResult> RunIndividualEnrollmentOperationAsync(this IProvisioningServiceClient operations, IndividualEnrollmentOperation individualEnrollmentOperation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunIndividualEnrollmentOperationWithHttpMessagesAsync(individualEnrollmentOperation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Device enrollment group operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupOperation'>
            /// Enrollment Group operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentOperationResult> RunEnrollmentGroupsOperationAsync(this IProvisioningServiceClient operations, EnrollmentGroupOperation enrollmentGroupOperation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunEnrollmentGroupsOperationWithHttpMessagesAsync(enrollmentGroupOperation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the device enrollment records.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='querySpecification'>
            /// The query specification.
            /// </param>
            /// <param name='xMsMaxItemCount'>
            /// pageSize
            /// </param>
            /// <param name='xMsContinuation'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IndividualEnrollment>> QueryIndividualEnrollmentsAsync(this IProvisioningServiceClient operations, QuerySpecification querySpecification, int? xMsMaxItemCount = default(int?), string xMsContinuation = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryIndividualEnrollmentsWithHttpMessagesAsync(querySpecification, xMsMaxItemCount, xMsContinuation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the attestation mechanism in the device enrollment record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Registration ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttestationMechanism> GetIndividualEnrollmentAttestationMechanismAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndividualEnrollmentAttestationMechanismWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the device enrollment groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='querySpecification'>
            /// The query specification.
            /// </param>
            /// <param name='xMsMaxItemCount'>
            /// pageSize
            /// </param>
            /// <param name='xMsContinuation'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrollmentGroup>> QueryEnrollmentGroupsAsync(this IProvisioningServiceClient operations, QuerySpecification querySpecification, int? xMsMaxItemCount = default(int?), string xMsContinuation = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryEnrollmentGroupsWithHttpMessagesAsync(querySpecification, xMsMaxItemCount, xMsContinuation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the attestation mechanism in the device enrollment group record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Enrollment group ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttestationMechanism> GetEnrollmentGroupAttestationMechanismAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnrollmentGroupAttestationMechanismWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the registration state of devices in this enrollmentGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Enrollment group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceRegistrationState>> QueryDeviceRegistrationStatesAsync(this IProvisioningServiceClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryDeviceRegistrationStatesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
