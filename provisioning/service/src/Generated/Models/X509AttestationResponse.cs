// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Service.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Attestation via X509.
    /// </summary>
    public partial class X509AttestationResponse
    {
        /// <summary>
        /// Initializes a new instance of the X509AttestationResponse class.
        /// </summary>
        public X509AttestationResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the X509AttestationResponse class.
        /// </summary>
        public X509AttestationResponse(X509CertificatesResponse clientCertificates = default(X509CertificatesResponse), X509CertificatesResponse signingCertificates = default(X509CertificatesResponse), X509CAReferences caReferences = default(X509CAReferences))
        {
            ClientCertificates = clientCertificates;
            SigningCertificates = signingCertificates;
            CaReferences = caReferences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientCertificates")]
        public X509CertificatesResponse ClientCertificates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signingCertificates")]
        public X509CertificatesResponse SigningCertificates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "caReferences")]
        public X509CAReferences CaReferences { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientCertificates != null)
            {
                ClientCertificates.Validate();
            }
            if (SigningCertificates != null)
            {
                SigningCertificates.Validate();
            }
        }
    }
}
